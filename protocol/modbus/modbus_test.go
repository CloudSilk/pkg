package modbus

import (
	"encoding/binary"
	"fmt"
	"testing"

	modbus "github.com/CloudSilk/pkg/modbus"
	"github.com/howeyc/crc16"
)

func TestCRC(t *testing.T) {
	data := []byte{
		// 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x01, 0x41, 0x02, 0x0a, 0x00, 0x00, 0xc9,
		// 0x00, 0x92, 0x00, 0x00, 0x00, 0x09, 0x01, 0x41, 0x02, 0x0a, 0x00, 0x00, 0xca,
		// 0x02, 0x04, 0x00, 0xfc, 0x00, 0x04,
		// 0x01, 0x01, 0x00, 0x00, 0x00, 0x0a,
		// 0x02, 0x00, 0x00,
		// 0x00, 0x00, 0x00, 0x0a,
		// 0x01, 0x81, 0x04,
		// 0x01, 0x02, 0x00, 0x10, 0x00, 0x13,
		0x53, 0x57, 0x54, 0x2d, 0x41, 0x30, 0x38, 0x38, 0x30, 0x34, 0x20, 0x56, 0x65, 0x72, 0x34, 0x2e, 0x30,
	}

	fmt.Println(string(data))
	return
	result := modbus.CRC16(data, modbus.CRCModbus16)
	t.Log(result)
	var testBytes []byte = make([]byte, 2)
	binary.BigEndian.PutUint16(testBytes, result)
	t.Logf("int32 to bytes:%x,%x,%x,%x", testBytes[0], testBytes[1], byte(result>>8), byte(result))

	result = crc16.Checksum(data, crc16.CCITTFalseTable)
	t.Log(result)
	binary.BigEndian.PutUint16(testBytes, result)
	t.Logf("int32 to bytes:%x,%x,%x,%x", testBytes[0], testBytes[1], byte(result), byte(result>>8))

}

var crc16tab = []uint16{
	0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
	0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
}

/**
 * CRC-16/XMODEM (Go语言)
 */
func crc16_xmodem(buf []byte) uint16 {
	var crc uint16 = 0
	var ch byte = 0

	size := len(buf)
	for i := 0; i < size; i++ {
		ch = byte(crc >> 12)
		crc <<= 4
		crc ^= crc16tab[ch^(buf[i]/16)]

		ch = byte(crc >> 12)
		crc <<= 4
		crc ^= crc16tab[ch^(buf[i]&0x0f)]
	}
	return crc
}
